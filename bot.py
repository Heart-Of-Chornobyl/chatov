import os
import replicate
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
translator = Translator()

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤
texts = {
    "en": {
        "greeting": "Hello! üëã\nSend me a photo to improve it or use the menu below.",
        "processing": "Processing your photo...",
        "done": "Here is your improved photo! ‚úÖ",
        "error": "Something went wrong. ‚ùå",
        "menu": "Choose an option:",
        "btn_send": "üñº Send Photo",
        "btn_lang": "üåç Change Language",
        "btn_info": "‚Ñπ Info",
        "choose_lang": "Select your language:",
        "info": "I use AI to enhance your photos!"
    },
    "uk": {
        "greeting": "–ü—Ä–∏–≤—ñ—Ç! üëã\n–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –º–µ–Ω—é –Ω–∏–∂—á–µ.",
        "processing": "–û–±—Ä–æ–±–ª—è—é —Ç–≤–æ—î —Ñ–æ—Ç–æ...",
        "done": "–û—Å—å —Ç–≤–æ—î –ø–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–æ—Ç–æ! ‚úÖ",
        "error": "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. ‚ùå",
        "menu": "–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:",
        "btn_send": "üñº –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ",
        "btn_lang": "üåç –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        "btn_info": "‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        "choose_lang": "–í–∏–±–µ—Ä–∏ –º–æ–≤—É:",
        "info": "–Ø –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é AI –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ–æ—Ç–æ!"
    },
    "ru": {
        "greeting": "–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.",
        "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...",
        "done": "–í–æ—Ç —Ç–≤–æ—ë —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ! ‚úÖ",
        "error": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ‚ùå",
        "menu": "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:",
        "btn_send": "üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
        "btn_lang": "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "btn_info": "‚Ñπ –ò–Ω—Ñ–æ",
        "choose_lang": "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "info": "–Ø –∏—Å–ø–æ–ª—å–∑—É—é AI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ!"
    },
    "pl": {
        "greeting": "Cze≈õƒá! üëã\nWy≈õlij zdjƒôcie do poprawy lub u≈ºyj menu poni≈ºej.",
        "processing": "Przetwarzam twoje zdjƒôcie...",
        "done": "Oto twoje ulepszone zdjƒôcie! ‚úÖ",
        "error": "Co≈õ posz≈Ço nie tak. ‚ùå",
        "menu": "Wybierz opcjƒô:",
        "btn_send": "üñº Wy≈õlij zdjƒôcie",
        "btn_lang": "üåç Zmie≈Ñ jƒôzyk",
        "btn_info": "‚Ñπ Info",
        "choose_lang": "Wybierz jƒôzyk:",
        "info": "U≈ºywam AI do ulepszania zdjƒôƒá!"
    },
    "de": {
        "greeting": "Hallo! üëã\nSchick mir ein Foto oder nutze das Men√º unten.",
        "processing": "Verarbeite dein Foto...",
        "done": "Hier ist dein verbessertes Foto! ‚úÖ",
        "error": "Etwas ist schiefgelaufen. ‚ùå",
        "menu": "W√§hle eine Option:",
        "btn_send": "üñº Foto senden",
        "btn_lang": "üåç Sprache √§ndern",
        "btn_info": "‚Ñπ Info",
        "choose_lang": "W√§hle deine Sprache:",
        "info": "Ich nutze KI, um deine Fotos zu verbessern!"
    }
}

# –ü–∞–º—è—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
user_lang = {}

def get_text(user_id, key, fallback="en"):
    lang = user_lang.get(user_id, fallback)
    return texts.get(lang, texts["en"]).get(key, key)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_text(user_id, "btn_send"), callback_data="send_photo")],
        [InlineKeyboardButton(text=get_text(user_id, "btn_lang"), callback_data="change_lang")],
        [InlineKeyboardButton(text=get_text(user_id, "btn_info"), callback_data="info")]
    ])

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
def language_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")],
        [InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk")],
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üáµüá± Polski", callback_data="lang_pl")],
        [InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="lang_de")]
    ])

# –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    lang = message.from_user.language_code or "en"
    if lang not in texts:
        lang = "en"
    user_lang[message.from_user.id] = lang
    await message.answer(get_text(message.from_user.id, "greeting"), reply_markup=main_menu(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –º–µ–Ω—é
@dp.callback_query(F.data == "change_lang")
async def change_language(callback: types.CallbackQuery):
    await callback.message.edit_text(get_text(callback.from_user.id, "choose_lang"), reply_markup=language_menu())

@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang_code = callback.data.split("_")[1]
    user_lang[callback.from_user.id] = lang_code
    await callback.message.edit_text(get_text(callback.from_user.id, "greeting"), reply_markup=main_menu(callback.from_user.id))

@dp.callback_query(F.data == "info")
async def info_cmd(callback: types.CallbackQuery):
    await callback.answer(get_text(callback.from_user.id, "info"), show_alert=True)

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer(get_text(message.from_user.id, "processing"))

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                img_bytes = await resp.read()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        img_path = "temp.jpg"
        with open(img_path, "wb") as f:
            f.write(img_bytes)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Replicate
        client = replicate.Client(api_token=REPLICATE_TOKEN)
        output = client.run(
            "tencentarc/gfpgan:latest",
            input={"img": open(img_path, "rb")}
        )

        improved_img_url = output[0]
        await message.answer_photo(improved_img_url, caption=get_text(message.from_user.id, "done"))
    except Exception as e:
        await message.answer(get_text(message.from_user.id, "error"))
        print(e)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
