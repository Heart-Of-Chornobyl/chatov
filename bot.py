import os
import replicate
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator
import aiohttp

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REPLICATE_TOKEN = os.getenv("REPLICATE_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
translator = Translator()

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
texts = {
    "en": {
        "greeting": "üëã Hello! I'm your photo enhancer bot. Choose an option:",
        "menu": "üìå Main menu:",
        "btn_improve": "üì∏ Enhance Photo",
        "btn_help": "‚ùì Help",
        "btn_about": "‚Ñπ About",
        "help": "Send me a photo, and I will enhance it using AI.",
        "about": "I am a bot that improves photo quality using AI models.",
        "processing": "‚è≥ Processing your photo...",
        "done": "‚úÖ Here is your enhanced photo!",
        "error": "‚ùå Something went wrong."
    },
    "uk": {
        "greeting": "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ–æ—Ç–æ. –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:",
        "menu": "üìå –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        "btn_improve": "üì∏ –ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ–æ—Ç–æ",
        "btn_help": "‚ùì –î–æ–ø–æ–º–æ–≥–∞",
        "btn_about": "‚Ñπ –ü—Ä–æ –±–æ—Ç–∞",
        "help": "–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ, —ñ —è –ø–æ–∫—Ä–∞—â—É –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI.",
        "about": "–Ø –±–æ—Ç, —â–æ –ø–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI.",
        "processing": "‚è≥ –û–±—Ä–æ–±–ª—è—é —Ç–≤–æ—î —Ñ–æ—Ç–æ...",
        "done": "‚úÖ –û—Å—å —Ç–≤–æ—î –ø–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–æ—Ç–æ!",
        "error": "‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫."
    },
    "ru": {
        "greeting": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:",
        "menu": "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "btn_improve": "üì∏ –£–ª—É—á—à–∏—Ç—å —Ñ–æ—Ç–æ",
        "btn_help": "‚ùì –ü–æ–º–æ—â—å",
        "btn_about": "‚Ñπ –û –±–æ—Ç–µ",
        "help": "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —É–ª—É—á—à—É –µ–≥–æ —Å –ø–æ–º–æ—â—å—é AI.",
        "about": "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é AI.",
        "processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...",
        "done": "‚úÖ –í–æ—Ç —Ç–≤–æ—ë —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ!",
        "error": "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
    },
    "pl": {
        "greeting": "üëã Cze≈õƒá! Jestem botem do poprawy zdjƒôƒá. Wybierz opcjƒô:",
        "menu": "üìå G≈Ç√≥wne menu:",
        "btn_improve": "üì∏ Popraw zdjƒôcie",
        "btn_help": "‚ùì Pomoc",
        "btn_about": "‚Ñπ O bocie",
        "help": "Wy≈õlij mi zdjƒôcie, a poprawiƒô je za pomocƒÖ AI.",
        "about": "Jestem botem, kt√≥ry poprawia zdjƒôcia dziƒôki AI.",
        "processing": "‚è≥ Przetwarzam zdjƒôcie...",
        "done": "‚úÖ Oto twoje ulepszone zdjƒôcie!",
        "error": "‚ùå Co≈õ posz≈Ço nie tak."
    },
    "cs": {
        "greeting": "üëã Ahoj! Jsem bot na vylep≈°en√≠ fotek. Vyber mo≈ænost:",
        "menu": "üìå Hlavn√≠ menu:",
        "btn_improve": "üì∏ Vylep≈°it fotku",
        "btn_help": "‚ùì N√°povƒõda",
        "btn_about": "‚Ñπ O botovi",
        "help": "Po≈°li mi fotku a vylep≈°√≠m ji pomoc√≠ AI.",
        "about": "Jsem bot, kter√Ω vylep≈°uje fotky pomoc√≠ AI.",
        "processing": "‚è≥ Zpracov√°v√°m fotku...",
        "done": "‚úÖ Tady je tvoje vylep≈°en√° fotka!",
        "error": "‚ùå Nƒõco se pokazilo."
    },
    "de": {
        "greeting": "üëã Hallo! Ich bin ein Bot zur Fotoverbesserung. W√§hle eine Option:",
        "menu": "üìå Hauptmen√º:",
        "btn_improve": "üì∏ Foto verbessern",
        "btn_help": "‚ùì Hilfe",
        "btn_about": "‚Ñπ √úber Bot",
        "help": "Schick mir ein Foto und ich verbessere es mit KI.",
        "about": "Ich bin ein Bot, der Fotos mit KI verbessert.",
        "processing": "‚è≥ Verarbeite dein Foto...",
        "done": "‚úÖ Hier ist dein verbessertes Foto!",
        "error": "‚ùå Etwas ist schiefgelaufen."
    }
}

def get_text(lang, key):
    return texts.get(lang, texts["en"]).get(key, key)

def get_menu(lang):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton(get_text(lang, "btn_improve"), callback_data="improve"),
        InlineKeyboardButton(get_text(lang, "btn_help"), callback_data="help"),
        InlineKeyboardButton(get_text(lang, "btn_about"), callback_data="about")
    )

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    lang = message.from_user.language_code if message.from_user.language_code else "en"
    await message.answer(get_text(lang, "greeting"), reply_markup=get_menu(lang))

@dp.callback_query_handler(lambda c: c.data in ["help", "about", "improve"])
async def menu_callback(callback_query: types.CallbackQuery):
    lang = callback_query.from_user.language_code if callback_query.from_user.language_code else "en"

    if callback_query.data == "help":
        await callback_query.message.edit_text(get_text(lang, "help"), reply_markup=get_menu(lang))
    elif callback_query.data == "about":
        await callback_query.message.edit_text(get_text(lang, "about"), reply_markup=get_menu(lang))
    elif callback_query.data == "improve":
        await callback_query.message.edit_text(get_text(lang, "menu") + "\nüì∏ " + get_text(lang, "btn_improve"),
                                               reply_markup=get_menu(lang))

@dp.message_handler(content_types=["photo"])
async def handle_photo(message: types.Message):
    lang = message.from_user.language_code if message.from_user.language_code else "en"
    await message.answer(get_text(lang, "processing"))

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_info.file_path}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                img_bytes = await resp.read()

        img_path = "temp.jpg"
        with open(img_path, "wb") as f:
            f.write(img_bytes)

        client = replicate.Client(api_token=REPLICATE_TOKEN)
        output = client.run(
            "tencentarc/gfpgan:latest",
            input={"img": open(img_path, "rb")}
        )

        improved_img_url = output[0]
        await message.answer_photo(improved_img_url, caption=get_text(lang, "done"), reply_markup=get_menu(lang))

    except Exception as e:
        await message.answer(get_text(lang, "error"))
        print(e)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
