// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ —Ñ–æ—Ä–º–∞–º–∏
const SITE_KEY = '6LejYZQrAAAAAF6KjC63ymhGuoU5lNRdpRt4Hkln';
const loginToggle = document.getElementById("loginToggle");
const registerToggle = document.getElementById("registerToggle");
const loginForm = document.getElementById("loginForm");
const registerForm = document.getElementById("registerForm");

loginToggle.addEventListener("click", () => {
  loginToggle.classList.add("active");
  registerToggle.classList.remove("active");
  loginForm.classList.add("active");
  registerForm.classList.remove("active");
});

registerToggle.addEventListener("click", () => {
  registerToggle.classList.add("active");
  loginToggle.classList.remove("active");
  registerForm.classList.add("active");
  loginForm.classList.remove("active");
});

document.getElementById("toRegister").onclick = () => registerToggle.click();
document.getElementById("toLogin").onclick = () => loginToggle.click();

// üé® –°–ª–æ–≥–∞–Ω–∏
const sloganElement = document.getElementById("slogan");
const slogans = [
  "–ù—ñ—á. –¢–∏—à–∞. –õ–∏—à–µ —Ç–≤–æ—ó —Å–ª–æ–≤–∞.",
  "–ü–∏—à–∏, –∫–æ–ª–∏ –º–æ–≤—á–∞—Ç—å —É—Å—ñ.",
  "–°–ø—Ä–∞–≤–∂–Ω—ñ –¥—É–º–∫–∏ –Ω–∞—Ä–æ–¥–∂—É—é—Ç—å—Å—è –≤ —Ç–µ–º—Ä—è–≤—ñ.",
  "–ù—ñ—á–Ω–µ —Å–≤—ñ—Ç–ª–æ ‚Äî –¥–ª—è –¥—É—à–µ–≤–Ω–∏—Ö —Ä–æ–∑–º–æ–≤.",
  "–¢–∏—à–∞ –Ω–æ—á—ñ –≥–æ–≤–æ—Ä–∏—Ç—å –±—ñ–ª—å—à–µ.",
  "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ. –ü–∏—à–∏ —â–∏—Ä–æ.",
  "–¢–≤–æ—ó —Å–ª–æ–≤–∞ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç—É—Ç."
];

function changeSlogan() {
  let newSlogan;
  do {
    newSlogan = slogans[Math.floor(Math.random() * slogans.length)];
  } while (newSlogan === sloganElement.innerText);
  sloganElement.innerText = newSlogan;
}
sloganElement.innerText = slogans[Math.floor(Math.random() * slogans.length)];

// üé® –ì—Ä–∞–¥—ñ—î–Ω—Ç
const gradients = [
  "radial-gradient(ellipse at bottom, #0a0f1c 0%, #070c16 70%, #060b13 100%)",
  "radial-gradient(ellipse at center, #0b101d 0%, #09131f 80%, #070e18 100%)",
  "radial-gradient(ellipse at top, #0c121f 0%, #0a111d 70%, #070d16 100%)"
];
let currentGradient = 0;
document.body.addEventListener("click", (e) => {
  const box = document.querySelector(".auth-box");
  if (!box.contains(e.target)) {
    currentGradient = (currentGradient + 1) % gradients.length;
    document.body.style.background = gradients[currentGradient];
  }
});

// üîê –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É
const recoverToggle = document.getElementById("recoverToggle");
const recoverForm = document.getElementById("recoverForm");
recoverToggle.addEventListener("click", () => {
  recoverForm.style.display = recoverForm.style.display === "flex" ? "none" : "flex";
});

// --- Invisible reCAPTCHA callbacks ---
function onLoginSubmit(token) {
  loginForm.dataset.recaptchaToken = token;
  loginForm.requestSubmit();
}

function onRegisterSubmit(token) {
  registerForm.dataset.recaptchaToken = token;
  registerForm.requestSubmit();
}

// ‚úÖ –û–±—Ä–æ–±–∫–∞ –≤—Ö–æ–¥—É
loginForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const token = loginForm.dataset.recaptchaToken;
  if (!token) {
    grecaptcha.execute(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ invisible reCAPTCHA
    return;
  }

  const email = loginForm.querySelector("input[name='email']").value.trim();
  const password = loginForm.querySelector("input[name='password']").value;

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø—É—Å—Ç–∏–π
  if (email !== '' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email");
    return;
  }

  if (password.length < 6) {
    alert("–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤");
    return;
  }

  const res = await fetch("/login", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username: email, password, recaptcha_token: token }),
  });

  const result = await res.json();

  if (result.success) {
    window.location.href = "home.html";
  } else {
    alert(result.message);
  }

  delete loginForm.dataset.recaptchaToken;
});

// ‚úÖ –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
registerForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const token = registerForm.dataset.recaptchaToken;
  if (!token) {
    grecaptcha.execute(); // –ó–∞–ø—É—Å–∫–∞—î–º–æ invisible reCAPTCHA
    return;
  }

  const username = registerForm.querySelector("input[name='username']").value.trim();
  const email = registerForm.querySelector("input[name='email']").value.trim();
  const password = registerForm.querySelector("input[name='password']").value;
  const password2 = registerForm.querySelector("input[name='password2']").value;

  if (!username) {
    alert("–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω");
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ email —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø—É—Å—Ç–∏–π
  if (email !== '' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email");
    return;
  }

  if (password.length < 6) {
    alert("–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤");
    return;
  }

  if (password !== password2) {
    alert("–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å");
    return;
  }

  const res = await fetch("/register", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username, password, recaptcha_token: token }),
  });

  const result = await res.json();

  if (result.success) {
    alert("–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å.");
    loginToggle.click();
  } else {
    alert(result.message);
  }

  delete registerForm.dataset.recaptchaToken;
});
